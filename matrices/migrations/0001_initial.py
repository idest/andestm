# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-07-11 00:22
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GeometricModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='GeometricModel')),
            ],
        ),
        migrations.CreateModel(
            name='Limits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minlon', models.FloatField()),
                ('minlat', models.FloatField()),
                ('maxlon', models.FloatField()),
                ('maxlat', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='MechanicalInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Bs_t', models.FloatField(help_text='Constante de tensión de Byerlee (MPa)', verbose_name='Bs (t)')),
                ('Bs_c', models.FloatField(help_text='Constante de compresión de Byerlee (MPa)', verbose_name='Bs (c)')),
                ('e', models.FloatField(help_text='Strain rate (s-1)', verbose_name='e')),
                ('R', models.FloatField(help_text='Constante universal de gases (J mol-1 K-1)', verbose_name='R')),
                ('mx_s', models.FloatField(help_text='Máximo stress disponible (MPa)', verbose_name='S max.')),
            ],
        ),
        migrations.CreateModel(
            name='Resolution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geo_delta', models.FloatField()),
                ('z_delta', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='RheologicModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField()),
                ('name', models.CharField(max_length=20)),
                ('H', models.FloatField()),
                ('n', models.FloatField()),
                ('A', models.FloatField()),
                ('ref', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='ThermalInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('K_z', models.BooleanField(help_text='¿Usar K en función de la profundidad?', verbose_name='K = f(z)')),
                ('H_z', models.BooleanField(help_text='¿Usar H en función de la profundidad?', verbose_name='H = f(z)')),
                ('EF_lat', models.BooleanField(help_text='¿Usar EF en función de la latitud?', verbose_name='EF = f(lat)')),
                ('EF', models.FloatField(help_text='Edad de la corteza oceánica en la fosa (Ma)', verbose_name='EF')),
                ('K_cs', models.FloatField(help_text='Conductividad térmica corteza sup. (W/mK)', verbose_name='K (cs)')),
                ('K_ci', models.FloatField(help_text='Conductividad térmica corteza inf. (W/mK)', verbose_name='K (ci)')),
                ('K_ml', models.FloatField(help_text='Conductividad térmica manto litosférico (W/mK)', verbose_name='K (ml)')),
                ('H_cs', models.FloatField(help_text='Calor radiogénico corteza sup. (W/m3)', verbose_name='H (cs)')),
                ('H_ci', models.FloatField(help_text='Calor radiogénico corteza inf. (W/m3)', verbose_name='H (ci)')),
                ('H_ml', models.FloatField(help_text='Calor radiogénico manto litosférico (W/m3)', verbose_name='H (ml)')),
                ('kpa', models.FloatField(help_text='Difusividad térmica (m2/s)', verbose_name='kpa')),
                ('T_p', models.FloatField(help_text='Temperatura potencial del manto (C)', verbose_name='Tp')),
                ('G_a', models.FloatField(help_text='Gradiente adiabático (K/m)', verbose_name='Ga')),
                ('V', models.FloatField(help_text='Velocidad de convergencia (m/Ma)', verbose_name='V')),
                ('b', models.FloatField(help_text='Parametro adimensional', verbose_name='b')),
                ('dip', models.FloatField(help_text='Ángulo de subduccion', verbose_name='dip')),
                ('D2', models.FloatField(help_text='Constante de proporcionalidad adimensional', verbose_name='D2')),
                ('d_rad', models.FloatField(help_text='Decaimiento radiogénico (km)', verbose_name='Drad')),
            ],
        ),
        migrations.CreateModel(
            name='TrenchAge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.FloatField()),
                ('age', models.FloatField()),
            ],
        ),
        migrations.AddField(
            model_name='mechanicalinput',
            name='Ci',
            field=models.ForeignKey(help_text='Modelo reológico para la corteza inferior', on_delete=django.db.models.deletion.CASCADE, related_name='ci', to='matrices.RheologicModel', verbose_name='C.I.'),
        ),
        migrations.AddField(
            model_name='mechanicalinput',
            name='Cs',
            field=models.ForeignKey(help_text='Modelo reológico para la corteza superior', on_delete=django.db.models.deletion.CASCADE, related_name='cs', to='matrices.RheologicModel', verbose_name='C.S.'),
        ),
        migrations.AddField(
            model_name='mechanicalinput',
            name='Ml',
            field=models.ForeignKey(help_text='Modelo reológico para el manto litosférico', on_delete=django.db.models.deletion.CASCADE, related_name='ml', to='matrices.RheologicModel', verbose_name='M.L.'),
        ),
    ]
